**Hash Map Search Algorithm**

A Hash Map (or Hash Table) is a data structure that allows for efficient key-value pair storage and retrieval. It uses a hashing function to compute an index (or "hash") for each key, storing values in an array-like structure. This enables average-case O(1) time complexity for lookups, insertions, and deletions.

The basic idea:

1. A key-value pair is inserted into the hash map.
2. The hash function computes an index for the key.
3. The value is stored at that index.
4. When searching for a key, the same hash function is used to find the index, retrieving the value quickly.

**Handling Collisions**

Since multiple keys might hash to the same index, collision handling is necessary. Common techniques include:

Chaining: Store multiple key-value pairs in a linked list at the same index.
Open Addressing (Linear Probing / Quadratic Probing): Find the next available slot in the array.
Double Hashing: Use a secondary hash function to determine the next slot.

**LeetCode Problem Examples**

Here are a few problems where the hash map algorithm can be applied:

Basic Hash Map Usage:
1. Two Sum (Use a hash map to store seen numbers and their indices)
242. Valid Anagram (Use a hash map to count character frequencies)
383. Ransom Note (Check if one string can be formed using letter counts from another)

More Advanced Hash Map Applications:
49. Group Anagrams (Use a hash map with sorted strings or frequency counts)
347. Top K Frequent Elements (Use a hash map to store frequency counts, then sort)
560. Subarray Sum Equals K (Use a prefix sum hash map to optimize searching)
