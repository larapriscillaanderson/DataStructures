**Binary Search Algorithm**

Binary Search is a powerful searching algorithm used to find the position of a target element in a sorted array or list. The algorithm repeatedly divides the search interval in half, eliminating half of the remaining elements in each step. This approach works only on sorted data, achieving a time complexity of O(log n).

The basic idea is to compare the middle element of the current range to the target:

If the middle element equals the target, return its index.
If the target is smaller than the middle element, search the left half of the range.
If the target is larger than the middle element, search the right half of the range.

**LeetCode Problem Examples**

Here are a few problems where the binary search algorithm can be applied:

Basic Binary Search:
- 704. Binary Search

Search Variations:
- 35. Search Insert Position
- 69. Sqrt(x)
- 162. Find Peak Element
- 74. Search a 2D Matrix

Two-pointer/Binary Search Mix:
- 33. Search in Rotated Sorted Array
- 81. Search in Rotated Sorted Array II

**Key Modifications Across Problems**

In many problems, the standard binary search is modified to meet specific requirements. 

Here are some common variations:

1. Returning the Left Pointer (e.g., Search Insert Position):

When the target value is not found, binary search can return the position where the target should be inserted.

Example:
In [1, 3, 5, 6] with target = 2, the left pointer ends at the correct insert position, index 1.

2. Adjusting the Range Dynamically (e.g., Sqrt(x)):

The search space may not always be an array but a numerical range.

Example:
Finding the square root of x involves binary searching between 0 and x to get the integer square root.

3. Handling Rotated Arrays (e.g., Search in Rotated Sorted Array):

When the array is rotated, binary search needs extra logic to determine which part of the array is sorted.

Example:
[4, 5, 6, 7, 0, 1, 2]: Check whether the left or right half is sorted and adjust the search accordingly.

4. Checking Mid + 1 or Mid - 1 (e.g., Find Peak Element):

In problems like finding a peak, comparisons are made between nums[mid] and its neighbors (nums[mid+1] or nums[mid-1]).

Example:
If nums[mid] < nums[mid+1], move the search to the right half.

5. Counting Occurrences (e.g., Variants of Binary Search):

Some problems ask for the first or last occurrence of a target in a sorted array.
Modify the algorithm to track the leftmost or rightmost index.

6. Searching 2D Matrices and Beyond:

When dealing with a sorted 2D matrix where:
Each row is sorted in non-decreasing order.

Example:
The first element of each row is greater than the last element of the previous row.
The matrix can be flattened conceptually into a 1D sorted list.
We can apply binary search while treating indices as if they belong to a 1D array.

Tricky modification: (using coordinate system) 

Convert the middle index to a row and column:
- row = mid // num_cols
- col = mid % num_cols

If matrix[row][col] == target, return True.

If matrix[row][col] < target, search the right half.

Otherwise, search the left half.

**Tips for Binary Search**

✅ Always double-check the loop conditions (while left <= right or while left < right).
✅ Pay attention to integer overflow in mid = (left + right) // 2 (rare in Python but common in other languages).
✅ Clearly define what the algorithm should return (e.g., the exact target index, an insert position, or a boolean).
